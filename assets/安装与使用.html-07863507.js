import{_ as e,V as a,W as d,a0 as t}from"./framework-ec37ef7d.js";const r={},s=t(`<h1 id="_1、安装" tabindex="-1"><a class="header-anchor" href="#_1、安装" aria-hidden="true">#</a> 1、安装</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc-c++
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum makecache fast
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2、启动、停止、关闭等" tabindex="-1"><a class="header-anchor" href="#_2、启动、停止、关闭等" aria-hidden="true">#</a> 2、启动、停止、关闭等</h1><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>启动docker</td><td>systemctl start docker</td></tr><tr><td>停止docker</td><td>systemctl stop docker</td></tr><tr><td>重启docker</td><td>systemctl restart docker</td></tr><tr><td>查看docker状态</td><td>systemctl status docker</td></tr><tr><td>开机启动</td><td>systemctl enable docker</td></tr><tr><td>查看docker概要信息</td><td>docker info</td></tr><tr><td>查看docker帮助文档</td><td>docker --help</td></tr></tbody></table><h1 id="_3、常用命令" tabindex="-1"><a class="header-anchor" href="#_3、常用命令" aria-hidden="true">#</a> 3、常用命令</h1><h2 id="_1、镜像相关命令" tabindex="-1"><a class="header-anchor" href="#_1、镜像相关命令" aria-hidden="true">#</a> 1、镜像相关命令</h2><h3 id="_1、查看镜像" tabindex="-1"><a class="header-anchor" href="#_1、查看镜像" aria-hidden="true">#</a> 1、查看镜像</h3><p><code>docker images</code></p><h3 id="_2、搜索镜像" tabindex="-1"><a class="header-anchor" href="#_2、搜索镜像" aria-hidden="true">#</a> 2、搜索镜像</h3><p><code>docker search 镜像名称</code></p><h3 id="_3、拉取镜像" tabindex="-1"><a class="header-anchor" href="#_3、拉取镜像" aria-hidden="true">#</a> 3、拉取镜像</h3><p><code>docker pull 镜像名称</code></p><h3 id="_4、删除镜像" tabindex="-1"><a class="header-anchor" href="#_4、删除镜像" aria-hidden="true">#</a> 4、删除镜像</h3><p><code>docker rmi 镜像ID</code></p><h2 id="_2、容器相关命令" tabindex="-1"><a class="header-anchor" href="#_2、容器相关命令" aria-hidden="true">#</a> 2、容器相关命令</h2><h3 id="_1、查看容器" tabindex="-1"><a class="header-anchor" href="#_1、查看容器" aria-hidden="true">#</a> 1、查看容器</h3><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>查看正在运行的容器</td><td>docker ps</td></tr><tr><td>查看所有容器</td><td>docker ps –a</td></tr><tr><td>查看最后一次运行的容器</td><td>docker ps –l</td></tr><tr><td>查看停止的容器</td><td>docker ps -f status=exited</td></tr></tbody></table><h3 id="_2、创建容器与启动容器" tabindex="-1"><a class="header-anchor" href="#_2、创建容器与启动容器" aria-hidden="true">#</a> 2、创建容器与启动容器</h3><p>(1)交互式方式创建容器:<code>docker run -it --name=容器名称 镜像名称:标签 /bin/bash</code> (2) 创建后台容器:<code>docker run -id --name=mycentos2 centos:7</code> (3) 守护式方式创建容器:<code>docker run -di --name=容器名称 镜像名称:标签</code></p><h3 id="_3、进入守护容器" tabindex="-1"><a class="header-anchor" href="#_3、进入守护容器" aria-hidden="true">#</a> 3、进入守护容器</h3><p><code>docker exec -it 容器名称 (或者容器ID) /bin/bash</code><code>docker attach 容器ID</code> 上述两个区别: • attach: 直接进入容器启动命令的终端，不会启动新的进程 • exec: 是在容器中打开新的终端，并且可以启动新的进程</p><h3 id="_4、停止与启动容器" tabindex="-1"><a class="header-anchor" href="#_4、停止与启动容器" aria-hidden="true">#</a> 4、停止与启动容器</h3><p><code>docker stop 容器名称（或者容器ID）</code><code>docker start 容器名称（或者容器ID）</code></p><h3 id="_5、文件拷贝" tabindex="-1"><a class="header-anchor" href="#_5、文件拷贝" aria-hidden="true">#</a> 5、文件拷贝</h3><p><code>docker cp 需要拷贝的文件或目录 容器名称:容器目录</code><code>docker cp 容器名称:容器目录 需要拷贝的文件或目录</code></p><h3 id="_6、目录挂载" tabindex="-1"><a class="header-anchor" href="#_6、目录挂载" aria-hidden="true">#</a> 6、目录挂载</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建并启动容器mycentos3,并挂载linux中的/usr/local/myhtml目录到容器的/usr/local/myhtml；也就是在linux中的/usr/local/myhtml中操作相当于对容器相应目录操作</span>
<span class="token function">docker</span> run <span class="token parameter variable">-di</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>容器的名字 <span class="token parameter variable">-v</span> /usr/local/myhtml:/usr/local/myhtml <span class="token parameter variable">--name</span><span class="token operator">=</span>mycentos3 centos:7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、删除容器" tabindex="-1"><a class="header-anchor" href="#_7、删除容器" aria-hidden="true">#</a> 7、删除容器</h3><p><code>docker rm 容器名称（容器ID）</code></p>`,29),n=[s];function c(i,o){return a(),d("div",null,n)}const l=e(r,[["render",c],["__file","安装与使用.html.vue"]]);export{l as default};
